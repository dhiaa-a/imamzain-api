// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// prisma/schema.prisma

// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

//
// ── AUTH & ACL MODELS ─────────────────────────────────────────────────────────
//

model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique
  username      String         @unique
  passwordHash  String
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  profile       UserProfile?
  activityLogs  ActivityLog[]
  roles         UserRole[]
  groups        GroupMember[]
}

model UserProfile {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id])
  userId    Int     @unique
  fullName  String?
  avatarUrl String?
  bio       String?
}

model ActivityLog {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  action     String
  tableName  String
  recordId   Int?
  changes    Json?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())
}

model Role {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  description String?

  userRoles       UserRole[]
  rolePermissions RolePermission[]
}

model Permission {
  id               Int               @id @default(autoincrement())
  name             String            @unique
  description      String?

  rolePermissions  RolePermission[]
  groupPermissions GroupPermission[]
}

model UserRole {
  id      Int   @id @default(autoincrement())
  user    User  @relation(fields: [userId], references: [id])
  userId  Int
  role    Role  @relation(fields: [roleId], references: [id])
  roleId  Int

  @@unique([userId, roleId])
}

model Group {
  id               Int               @id @default(autoincrement())
  name             String            @unique
  description      String?

  members          GroupMember[]
  groupPermissions GroupPermission[]
}

model GroupMember {
  id      Int    @id @default(autoincrement())
  group   Group  @relation(fields: [groupId], references: [id])
  groupId Int
  user    User   @relation(fields: [userId], references: [id])
  userId  Int

  @@unique([groupId, userId])
}

model RolePermission {
  id           Int        @id @default(autoincrement())
  role         Role       @relation(fields: [roleId], references: [id])
  roleId       Int
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId Int

  @@unique([roleId, permissionId])
}

model GroupPermission {
  id           Int        @id @default(autoincrement())
  group        Group      @relation(fields: [groupId], references: [id])
  groupId      Int
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId Int

  @@unique([groupId, permissionId])
}

//
// ── CONTENT & TRANSLATION MODELS ──────────────────────────────────────────────
//

model Language {
  code                String                  @id
  name                String
  nativeName          String

  bookTranslations      BookTranslation[]
  researchTranslations  ResearchTranslation[]
  articleTranslations   ArticleTranslation[]
}

model BookType {
  id     Int    @id @default(autoincrement())
  slug   String
  name   String

  books  Book[]
}

model Book {
  id           Int                @id @default(autoincrement())
  slug         String
  pages        Int
  parts        Int
  views        Int
  image        String
  pdf          String
  partNumber   Int
  totalParts   Int
  categoryId   Int
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt

  category     BookType           @relation(fields: [categoryId], references: [id])
  translations BookTranslation[]
}

model BookTranslation {
  id                Int                    @id @default(autoincrement())
  bookId            Int
  languageCode      String
  isDefault         Boolean
  title             String
  author            String
  printHouse        String
  printDate         String
  series            String

  book              Book                   @relation(fields: [bookId], references: [id])
  language          Language               @relation(fields: [languageCode], references: [code])
  names             BookTranslationName[]
}

model BookTranslationName {
  id                  Int                @id @default(autoincrement())
  bookTranslationId   Int
  name                String

  translation         BookTranslation    @relation(fields: [bookTranslationId], references: [id])
}

model ResearchTranslationCategory {
  id         Int        @id @default(autoincrement())
  slug       String?
  name       String?

  researches Research[]
}

model Research {
  id          Int                         @id @default(autoincrement())
  slug        String
  date        DateTime     @db.Date
  views       Int
  pdf         String
  pages       Int
  categoryId  Int
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  category    ResearchTranslationCategory @relation(fields: [categoryId], references: [id])
  translations ResearchTranslation[]
}

model ResearchTranslation {
  id             Int         @id @default(autoincrement())
  researchId     Int
  languageCode   String
  title          String
  abstract       String
  isDefault      Boolean

  research       Research    @relation(fields: [researchId], references: [id])
  language       Language    @relation(fields: [languageCode], references: [code])
}

model ArticleCategory {
  id        Int       @id @default(autoincrement())
  slug      String    @unique
  name      String

  articles  Article[]
}

model Article {
  id           Int                   @id @default(autoincrement())
  slug         String
  image        String
  views        Int
  date         DateTime
  categoryId   Int
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt

  category     ArticleCategory       @relation(fields: [categoryId], references: [id])
  translations ArticleTranslation[]
  attachments  ArticleAttachment[]
}

model ArticleTranslation {
  id             Int       @id @default(autoincrement())
  articleId      Int
  languageCode   String
  isDefault      Boolean
  title          String
  summary        String
  body           String

  article        Article   @relation(fields: [articleId], references: [id])
  language       Language  @relation(fields: [languageCode], references: [code])
}

model ArticleAttachment {
  id         Int      @id @default(autoincrement())
  articleId  Int
  path       String

  article    Article  @relation(fields: [articleId], references: [id])
}
