openapi: 3.0.0
info:
  title: Imam Zain API
  version: 2.0.0
  description: |
    API documentation for the Imam Zain digital platform. This API provides endpoints for managing
    articles with multi-language support, attachments, file uploads, and user authentication.
    
    ## Features
    - Multi-language article management
    - File upload and attachment system
    - JWT-based authentication
    - Role-based authorization
    - Comprehensive error handling
    
  contact:
    name: API Support
    email: support@imamzain.com
    url: https://imamzain.com/support
  license:
    name: Proprietary
    url: https://imamzain.com/license

servers:
  - url: https://api.imamzain.com/api/v1
    description: Production server
  - url: https://staging-api.imamzain.com/api/v1
    description: Staging server
  - url: http://localhost:8000/api/v1
    description: Development server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from the authentication endpoint
    cookieAuth:
      type: apiKey
      in: cookie
      name: refreshToken
      description: HTTP-only refresh token cookie

  responses:
    BadRequest:
      description: Bad request - Invalid input data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error:
              code: "BAD_REQUEST"
              message: "Invalid input data"

    ValidationError:
      description: Validation failed
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ErrorResponse'
              - type: object
                properties:
                  error:
                    type: object
                    properties:
                      details:
                        type: array
                        items:
                          type: string
          example:
            success: false
            error:
              code: "VALIDATION_ERROR"
              message: "Validation failed"
              details:
                - "Title is required"
                - "CategoryId must be a number"

    Unauthorized:
      description: Authentication required or invalid token
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error:
              code: "UNAUTHORIZED"
              message: "No token provided"

    Forbidden:
      description: Insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error:
              code: "FORBIDDEN"
              message: "Insufficient permissions"

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error:
              code: "NOT_FOUND"
              message: "Article not found"

    Conflict:
      description: Resource conflict (duplicate)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error:
              code: "CONFLICT"
              message: "Article with this slug already exists"

    InternalError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error:
              code: "INTERNAL_ERROR"
              message: "Internal server error"

  parameters:
    LanguageParam:
      name: lang
      in: path
      required: true
      description: Language code (e.g., 'en', 'ar', 'fa')
      schema:
        type: string
        pattern: '^[a-z]{2}$'
        example: "en"

    PageParam:
      name: page
      in: query
      description: Page number for pagination
      schema:
        type: integer
        minimum: 1
        default: 1
        example: 1

    LimitParam:
      name: limit
      in: query
      description: Number of items per page
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 10
        example: 10

    SearchParam:
      name: search
      in: query
      description: Search term for filtering
      schema:
        type: string
        example: "islamic philosophy"

    CategoryIdParam:
      name: categoryId
      in: query
      description: Filter by category ID
      schema:
        type: integer
        minimum: 1
        example: 1

    ArticleIdParam:
      name: id
      in: path
      required: true
      description: Article ID
      schema:
        type: integer
        minimum: 1
        example: 123

    SlugParam:
      name: slug
      in: path
      required: true
      description: Article slug
      schema:
        type: string
        pattern: '^[a-z0-9-]+$'
        example: "understanding-islamic-philosophy"

    AttachmentIdParam:
      name: id
      in: path
      required: true
      description: Attachment ID
      schema:
        type: integer
        minimum: 1
        example: 456

    FilenameParam:
      name: filename
      in: path
      required: true
      description: File name
      schema:
        type: string
        example: "document.pdf"

    UserIdParam:
      name: id
      in: path
      required: true
      description: User ID
      schema:
        type: integer
        minimum: 1
        example: 789

  schemas:
    # Base Response Schemas
    StandardResponse:
      type: object
      required:
        - success
        - data
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
        message:
          type: string
          example: "Operation completed successfully"

    ErrorResponse:
      type: object
      required:
        - success
        - error
      properties:
        success:
          type: boolean
          example: false
        error:
          type: object
          required:
            - code
            - message
          properties:
            code:
              type: string
              example: "NOT_FOUND"
            message:
              type: string
              example: "Resource not found"

    PaginationResponse:
      type: object
      required:
        - page
        - limit
        - total
        - totalPages
      properties:
        page:
          type: integer
          example: 1
        limit:
          type: integer
          example: 10
        total:
          type: integer
          example: 150
        totalPages:
          type: integer
          example: 15

    # Authentication Schemas
    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: "admin"
        password:
          type: string
          format: password
          example: "password123"

    LoginResponse:
      allOf:
        - $ref: '#/components/schemas/StandardResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                token:
                  type: string
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                user:
                  $ref: '#/components/schemas/UserInfo'

    RefreshTokenResponse:
      allOf:
        - $ref: '#/components/schemas/StandardResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                token:
                  type: string
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

    # User Schemas
    UserInfo:
      type: object
      properties:
        id:
          type: integer
          example: 1
        username:
          type: string
          example: "admin"
        email:
          type: string
          format: email
          example: "admin@imamzain.com"
        roles:
          type: array
          items:
            type: string
          example: ["admin", "editor"]

    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        username:
          type: string
          example: "john_doe"
        email:
          type: string
          format: email
          example: "john@example.com"
        isActive:
          type: boolean
          example: true
        createdAt:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        profile:
          type: object
          nullable: true
        roles:
          type: array
          items:
            type: string
          example: ["editor"]
        permissions:
          type: array
          items:
            type: string
          example: ["CREATE_ARTICLE", "UPDATE_ARTICLE"]

    CreateUserRequest:
      type: object
      required:
        - email
        - username
        - password
        - roles
      properties:
        email:
          type: string
          format: email
          example: "newuser@example.com"
        username:
          type: string
          example: "newuser"
        password:
          type: string
          format: password
          example: "securepassword123"
        roles:
          type: array
          items:
            type: integer
          example: [2, 3]

    UpdateUserStatusRequest:
      type: object
      required:
        - isActive
      properties:
        isActive:
          type: boolean
          example: false

    UpdateUserRolesRequest:
      type: object
      required:
        - roles
      properties:
        roles:
          type: array
          items:
            type: integer
          example: [1, 2]

    # Article Schemas
    Language:
      type: object
      properties:
        code:
          type: string
          example: "en"
        name:
          type: string
          example: "English"
        nativeName:
          type: string
          example: "English"

    ArticleCategory:
      type: object
      properties:
        id:
          type: integer
          example: 1
        slug:
          type: string
          example: "philosophy"
        name:
          type: string
          example: "Philosophy"

    ArticleTranslation:
      type: object
      properties:
        id:
          type: integer
          example: 1
        articleId:
          type: integer
          example: 123
        languageCode:
          type: string
          example: "en"
        isDefault:
          type: boolean
          example: true
        title:
          type: string
          example: "Understanding Islamic Philosophy"
        summary:
          type: string
          example: "An exploration of the foundational concepts in Islamic philosophy"
        body:
          type: string
          example: "Full article content here..."
        language:
          $ref: '#/components/schemas/Language'

    CreateArticleTranslation:
      type: object
      required:
        - languageCode
        - isDefault
        - title
        - summary
        - body
      properties:
        languageCode:
          type: string
          example: "en"
        isDefault:
          type: boolean
          example: true
        title:
          type: string
          example: "Understanding Islamic Philosophy"
        summary:
          type: string
          example: "An exploration of the foundational concepts"
        body:
          type: string
          example: "Full article content..."

    UpdateArticleTranslation:
      type: object
      required:
        - languageCode
        - title
        - summary
        - body
      properties:
        id:
          type: integer
          example: 1
        languageCode:
          type: string
          example: "en"
        isDefault:
          type: boolean
          example: true
        title:
          type: string
          example: "Updated Article Title"
        summary:
          type: string
          example: "Updated summary"
        body:
          type: string
          example: "Updated content..."

    ArticleAttachmentRequest:
      type: object
      required:
        - attachmentId
        - type
        - order
      properties:
        attachmentId:
          type: integer
          example: 456
        type:
          type: string
          enum: ["image", "attachment", "other"]
          example: "image"
        order:
          type: integer
          example: 1

    ArticleAttachment:
      type: object
      properties:
        id:
          type: integer
          example: 1
        articleId:
          type: integer
          example: 123
        attachmentId:
          type: integer
          example: 456
        type:
          type: string
          enum: ["image", "attachment", "other"]
          example: "image"
        order:
          type: integer
          example: 1
        attachment:
          $ref: '#/components/schemas/Attachment'

    Article:
      type: object
      properties:
        id:
          type: integer
          example: 123
        slug:
          type: string
          example: "understanding-islamic-philosophy"
        views:
          type: integer
          example: 1500
        date:
          type: string
          format: date-time
          example: "2024-01-15T00:00:00Z"
        categoryId:
          type: integer
          example: 1
        createdAt:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        category:
          $ref: '#/components/schemas/ArticleCategory'
        translations:
          type: array
          items:
            $ref: '#/components/schemas/ArticleTranslation'
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/ArticleAttachment'

    CreateArticleRequest:
      type: object
      required:
        - categoryId
        - date
        - translations
      properties:
        slug:
          type: string
          pattern: '^[a-z0-9-]+$'
          example: "understanding-islamic-philosophy"
          description: "Optional - will be auto-generated from title if not provided"
        categoryId:
          type: integer
          example: 1
        date:
          type: string
          format: date-time
          example: "2024-01-15T00:00:00Z"
        translations:
          type: array
          items:
            $ref: '#/components/schemas/CreateArticleTranslation'
          minItems: 1
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/ArticleAttachmentRequest'
          description: "Optional attachments"

    UpdateArticleRequest:
      type: object
      properties:
        slug:
          type: string
          pattern: '^[a-z0-9-]+$'
          example: "updated-article-slug"
        categoryId:
          type: integer
          example: 2
        date:
          type: string
          format: date-time
          example: "2024-01-16T00:00:00Z"
        translations:
          type: array
          items:
            $ref: '#/components/schemas/UpdateArticleTranslation'
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/ArticleAttachmentRequest'

    # Attachment Schemas
    Attachment:
      type: object
      properties:
        id:
          type: integer
          example: 456
        originalName:
          type: string
          example: "document.pdf"
        fileName:
          type: string
          example: "abc123-document.pdf"
        path:
          type: string
          example: "abc123-document.pdf"
        mimeType:
          type: string
          example: "application/pdf"
        size:
          type: integer
          example: 2048576
        disk:
          type: string
          example: "local"
        collection:
          type: string
          nullable: true
          example: "articles"
        altText:
          type: string
          nullable: true
          example: "Document description"
        metadata:
          type: object
          example: {}
        createdAt:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        url:
          type: string
          example: "/uploads/abc123-document.pdf"

    UpdateAttachmentRequest:
      type: object
      properties:
        originalName:
          type: string
          example: "updated-document.pdf"
        fileName:
          type: string
          example: "new-filename.pdf"
        path:
          type: string
          example: "new-path.pdf"
        mimeType:
          type: string
          example: "application/pdf"
        size:
          type: integer
          minimum: 1
          example: 2048576
        disk:
          type: string
          example: "local"
        collection:
          type: string
          nullable: true
          example: "documents"
        altText:
          type: string
          nullable: true
          example: "Updated description"
        metadata:
          type: object
          example: {}

    FileUploadRequest:
      type: object
      properties:
        file:
          type: string
          format: binary
          description: "File to upload (max 10MB)"
        collection:
          type: string
          example: "articles"
        altText:
          type: string
          example: "Image description"
        metadata:
          type: string
          example: '{"category": "header-image"}'
          description: "JSON string of metadata"

paths:
  # Authentication Endpoints
  /auth/login:
    post:
      summary: User login
      tags: [Authentication]
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          headers:
            Set-Cookie:
              description: HTTP-only refresh token cookie
              schema:
                type: string
                example: "refreshToken=abc123; HttpOnly; Secure; SameSite=Strict"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/refresh:
    post:
      summary: Refresh JWT token
      tags: [Authentication]
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshTokenResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /auth/logout:
    post:
      summary: User logout
      tags: [Authentication]
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: "Logged out"

  # User Management Endpoints
  /users:
    get:
      summary: Get all users
      tags: [Users]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /users/{id}:
    parameters:
      - $ref: '#/components/parameters/UserIdParam'
    get:
      summary: Get user by ID
      tags: [Users]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  # Article Endpoints
  /{lang}/articles:
    parameters:
      - $ref: '#/components/parameters/LanguageParam'
    get:
      summary: Get articles with filtering and pagination
      tags: [Articles]
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/CategoryIdParam'
        - $ref: '#/components/parameters/SearchParam'
      responses:
        '200':
          description: Paginated list of articles
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Article'
                      pagination:
                        $ref: '#/components/schemas/PaginationResponse'
        '400':
          $ref: '#/components/responses/BadRequest'

    post:
      summary: Create new article
      tags: [Articles]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateArticleRequest'
      responses:
        '201':
          description: Article created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Article'
                      message:
                        type: string
                        example: "Article created with auto-generated slug: understanding-philosophy"
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: Category or attachment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /{lang}/articles/{id}:
    parameters:
      - $ref: '#/components/parameters/LanguageParam'
      - $ref: '#/components/parameters/ArticleIdParam'
    get:
      summary: Get article by ID
      tags: [Articles]
      responses:
        '200':
          description: Article details
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Article'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      summary: Update article
      tags: [Articles]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateArticleRequest'
      responses:
        '200':
          description: Article updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Article'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'

    delete:
      summary: Delete article
      tags: [Articles]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Article deleted successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: "Article deleted successfully"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /{lang}/articles/slug/{slug}:
    parameters:
      - $ref: '#/components/parameters/LanguageParam'
      - $ref: '#/components/parameters/SlugParam'
    get:
      summary: Get article by slug
      tags: [Articles]
      responses:
        '200':
          description: Article details (views automatically incremented)
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Article'
        '404':
          $ref: '#/components/responses/NotFound'

  # Attachment Endpoints
  /attachments:
    get:
      summary: Get all attachments with filtering
      tags: [Attachments]
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - name: mimeType
          in: query
          description: Filter by MIME type
          schema:
            type: string
            example: "image/jpeg"
        - name: collection
          in: query
          description: Filter by collection
          schema:
            type: string
            example: "articles"
        - name: disk
          in: query
          description: Filter by disk type
          schema:
            type: string
            example: "local"
        - $ref: '#/components/parameters/SearchParam'
      responses:
        '200':
          description: Paginated list of attachments
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Attachment'
                      pagination:
                        $ref: '#/components/schemas/PaginationResponse'

  /attachments/upload:
    post:
      summary: Upload file
      tags: [Attachments]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FileUploadRequest'
      responses:
        '201':
          description: File uploaded successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Attachment'
                      message:
                        type: string
                        example: "File uploaded successfully"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '413':
          description: File too large
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /attachments/{id}:
    parameters:
      - $ref: '#/components/parameters/AttachmentIdParam'
    get:
      summary: Get attachment metadata
      tags: [Attachments]
      responses:
        '200':
          description: Attachment metadata
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Attachment'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      summary: Update attachment metadata
      tags: [Attachments]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAttachmentRequest'
      responses:
        '200':
          description: Attachment updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Attachment'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      summary: Delete attachment
      tags: [Attachments]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Attachment deleted successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: "Attachment deleted successfully"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Attachment is in use
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                  - type: object
                    properties:
                      error:
                        type: object
                        properties:
                          code:
                            type: string
                            example: "CONFLICT"
                          message:
                            type: string
                            example: "Cannot delete attachment as it is being used by articles"

  /attachments/uploads/{filename}:
    parameters:
      - $ref: '#/components/parameters/FilenameParam'
    get:
      summary: Serve uploaded file
      tags: [Attachments]
      description: Serves the actual file content (public access)
      responses:
        '200':
          description: File content
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
            image/*:
              schema:
                type: string
                format: binary
            application/pdf:
              schema:
                type: string
                format: binary
        '404':
          $ref: '#/components/responses/NotFound'

# Tags for grouping endpoints
tags:
  - name: Authentication
    description: User authentication and token management
  - name: Users
    description: User management operations
  - name: Articles
    description: Multi-language article management
  - name: Attachments
    description: File upload and attachment management

# Security requirements
security:
  - bearerAuth: []

# Additional documentation
externalDocs:
  description: Find more info about the API
  url: https://imamzain.com/api-docs