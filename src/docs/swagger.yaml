openapi: 3.0.0
info:
  title: Imam Zain API
  version: 1.1.0
  description: |
    API documentation for the Imam Zain digital platform. This API provides endpoints for managing
    books, research papers, blog posts, galleries, attachments, images, YouTube playlists, and store
    locations for an informational platform about Islamic scholarship.
  contact:
    name: API Support
    email: support@yourdomain.com
    url: https://yourdomain.com/support
  license:
    name: Proprietary
    url: https://yourdomain.com/license
servers:
  - url: https://yourdomain.com/api/v1
    description: Production server
  - url: https://staging.yourdomain.com/api/v1
    description: Staging server
  - url: https://dev.yourdomain.com/api/v1
    description: Development server
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from the authentication endpoint
  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Unauthorized:
      description: Authentication required or invalid token
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Forbidden:
      description: Insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    InternalError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
  parameters:
    PageParam:
      name: page
      in: query
      description: Page number (for pagination)
      schema:
        type: integer
        minimum: 1
        default: 1
    LimitParam:
      name: limit
      in: query
      description: Items per page (for pagination)
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 10
    SortParam:
      name: sort
      in: query
      description: Sort field
      schema:
        type: string
        enum: [title, author, printDate, views, date, lastUpdate]
        default: title
    OrderParam:
      name: order
      in: query
      description: Sort order
      schema:
        type: string
        enum: [asc, desc]
        default: asc
  schemas:
    StandardResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
        message:
          type: string
          example: Operation completed successfully
    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: object
          properties:
            code:
              type: string
              example: RESOURCE_NOT_FOUND
            message:
              type: string
              example: The requested resource could not be found
    Pagination:
      type: object
      properties:
        total:
          type: integer
          example: 253
        page:
          type: integer
          example: 3
        limit:
          type: integer
          example: 20
        pages:
          type: integer
          example: 13
    Book:
      type: object
      properties:
        id:
          type: integer
          minimum: 1
          example: 42
        slug:
          type: string
          pattern: '^[a-z0-9]+(?:-[a-z0-9]+)*$'
          example: nahj-al-balagha-commentary
        title:
          type: string
          example: Commentary on Nahj al-Balagha
        author:
          type: string
          example: Sheikh Muhammad Abduh
        otherNames:
          type: array
          items:
            type: string
          example: [Muhammad Mohiuddin, Ali Raza]
        printHouse:
          type: string
          example: Dar al-Hikma
        printDate:
          type: string
          format: date
          example: 2018-06-12
        language:
          type: string
          example: Arabic
        pages:
          type: integer
          minimum: 1
          example: 423
        parts:
          type: integer
          minimum: 1
          example: 2
        views:
          type: integer
          minimum: 0
          example: 1834
        image:
          type: string
          example: /images/books/nahj-al-balagha-commentary.jpg
        pdf:
          type: string
          example: /files/books/nahj-al-balagha-commentary.pdf
        partNumber:
          type: integer
          minimum: 1
          example: 1
        totalParts:
          type: integer
          minimum: 1
          example: 3
        series:
          type: string
          example: Classical Commentaries
    BookCreate:
      type: object
      required: [title, author]
      properties:
        title:
          type: string
          example: Commentary on Nahj al-Balagha
        author:
          type: string
          example: Sheikh Muhammad Abduh
        otherNames:
          type: array
          items:
            type: string
        printHouse:
          type: string
        printDate:
          type: string
          format: date
        language:
          type: string
        pages:
          type: integer
          minimum: 1
        parts:
          type: integer
          minimum: 1
        image:
          type: string
        pdf:
          type: string
        partNumber:
          type: integer
          minimum: 1
        totalParts:
          type: integer
          minimum: 1
        series:
          type: string
    Post:
      type: object
      properties:
        id:
          type: integer
          minimum: 1
          example: 157
        slug:
          type: string
          pattern: '^[a-z0-9]+(?:-[a-z0-9]+)*$'
          example: understanding-islamic-philosophy
        image:
          type: string
          example: /images/posts/islamic-philosophy.jpg
        title:
          type: string
          example: Understanding Islamic Philosophy
        summary:
          type: string
          example: An exploration of the foundational concepts in Islamic philosophy
        body:
          type: object
          properties:
            lede:
              type: string
            content:
              type: string
            tail:
              type: string
        views:
          type: integer
          minimum: 0
          example: 3421
        date:
          type: string
          format: date
          example: 2023-01-15
        lastUpdate:
          type: string
          format: date
          example: 2023-02-10
        category:
          type: string
          example: Philosophy
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/Attachment'
    PostCreate:
      type: object
      required: [title, summary, body, category]
      properties:
        title:
          type: string
        summary:
          type: string
        body:
          type: object
          properties:
            lede:
              type: string
            content:
              type: string
            tail:
              type: string
        image:
          type: string
        category:
          type: string
        attachments:
          type: array
          items:
            type: integer
    Research:
      type: object
      properties:
        id:
          type: integer
          minimum: 1
        slug:
          type: string
          pattern: '^[a-z0-9]+(?:-[a-z0-9]+)*$'
        title:
          type: string
        description:
          type: string
        author:
          type: string
        otherNames:
          type: array
          items:
            type: string
        printHouse:
          type: string
        printDate:
          type: string
          format: date
        language:
          type: string
        pages:
          type: integer
          minimum: 1
        parts:
          type: integer
          minimum: 1
        views:
          type: integer
          minimum: 0
        category:
          type: string
        pdf:
          type: string
    ResearchCreate:
      type: object
      required: [title, description, author]
      properties:
        title:
          type: string
        description:
          type: string
        author:
          type: string
        otherNames:
          type: array
          items:
            type: string
        printHouse:
          type: string
        printDate:
          type: string
          format: date
        language:
          type: string
        pages:
          type: integer
          minimum: 1
        parts:
          type: integer
          minimum: 1
        category:
          type: string
        pdf:
          type: string
    Gallery:
      type: object
      properties:
        id:
          type: integer
          minimum: 1
        title:
          type: string
        images:
          type: array
          items:
            $ref: '#/components/schemas/Image'
    GalleryCreate:
      type: object
      required: [title, images]
      properties:
        title:
          type: string
        images:
          type: array
          items:
            type: integer
    Attachment:
      type: object
      properties:
        id:
          type: integer
          minimum: 1
        path:
          type: string
        fileName:
          type: string
        mimeType:
          type: string
        size:
          type: integer
          minimum: 0
    Image:
      type: object
      properties:
        id:
          type: integer
          minimum: 1
        path:
          type: string
        alt:
          type: string
        width:
          type: integer
          minimum: 1
        height:
          type: integer
          minimum: 1
    Playlist:
      type: object
      properties:
        playlistId:
          type: string
        title:
          type: string
        videos:
          type: array
          items:
            $ref: '#/components/schemas/Video'
    Video:
      type: object
      properties:
        title:
          type: string
        url:
          type: string
          format: uri
        date:
          type: string
          format: date
        desc:
          type: string
        thumbnail:
          type: string
          format: uri
        slug:
          type: string
          pattern: '^[a-z0-9]+(?:-[a-z0-9]+)*$'
    Store:
      type: object
      properties:
        city:
          type: string
        sellpoints:
          type: array
          items:
            $ref: '#/components/schemas/Sellpoint'
    Sellpoint:
      type: object
      properties:
        name:
          type: string
        location:
          type: string
        phone:
          type: string
        email:
          type: string
          format: email
        hours:
          type: string
paths:
  /auth/login:
    post:
      summary: User login
      tags: [Authentication]
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username, password]
              properties:
                username:
                  type: string
                password:
                  type: string
                  format: password
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          token:
                            type: string
                          user:
                            type: object
                            properties:
                              id:
                                type: integer
                              username:
                                type: string
                              roles:
                                type: array
                                items:
                                  type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /auth/refresh:
    post:
      summary: Refresh JWT token
      tags: [Authentication]
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          token:
                            type: string
        '401':
          $ref: '#/components/responses/Unauthorized'
  /books:
    get:
      summary: Get all books
      tags: [Books]
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - in: query
          name: author
          schema:
            type: string
          description: Filter by author
        - in: query
          name: language
          schema:
            type: string
          description: Filter by language
        - in: query
          name: series
          schema:
            type: string
          description: Filter by series
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/OrderParam'
      responses:
        '200':
          description: Paginated list of books
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          books:
                            type: array
                            items:
                              $ref: '#/components/schemas/Book'
                          pagination:
                            $ref: '#/components/schemas/Pagination'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'
    post:
      summary: Create a new book
      tags: [Books]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookCreate'
      responses:
        '201':
          description: Book created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Book'
                      message:
                        type: string
                        example: Book created successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalError'
  /books/{bookId}:
    parameters:
      - name: bookId
        in: path
        required: true
        schema:
          type: integer
          minimum: 1
        description: Book identifier
    get:
      summary: Get a book by ID
      tags: [Books]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Book retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Book'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
    put:
      summary: Update a book
      tags: [Books]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookCreate'
      responses:
        '200':
          description: Book updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Book'
                      message:
                        type: string
                        example: Book updated successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
    delete:
      summary: Delete a book
      tags: [Books]
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Book deleted successfully (no content)
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
  /posts:
    get:
      summary: Get all posts
      tags: [Posts]
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - in: query
          name: category
          schema:
            type: string
          description: Filter by category
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/OrderParam'
      responses:
        '200':
          description: Paginated list of posts
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          posts:
                            type: array
                            items:
                              $ref: '#/components/schemas/Post'
                          pagination:
                            $ref: '#/components/schemas/Pagination'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'
    post:
      summary: Create a new post
      tags: [Posts]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostCreate'
      responses:
        '201':
          description: Post created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Post'
                      message:
                        type: string
                        example: Post created successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalError'
  /posts/{postId}:
    parameters:
      - name: postId
        in: path
        required: true
        schema:
          type: integer
          minimum: 1
        description: Post identifier
    get:
      summary: Get a post by ID
      tags: [Posts]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Post retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Post'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
    put:
      summary: Update a post
      tags: [Posts]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostCreate'
      responses:
        '200':
          description: Post updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Post'
                      message:
                        type: string
                        example: Post updated successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
    delete:
      summary: Delete a post
      tags: [Posts]
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Post deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
  /research:
    get:
      summary: Get all research papers
      tags: [Research]
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - in: query
          name: category
          schema:
            type: string
          description: Filter by research category
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/OrderParam'
      responses:
        '200':
          description: Paginated list of research papers
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          research:
                            type: array
                            items:
                              $ref: '#/components/schemas/Research'
                          pagination:
                            $ref: '#/components/schemas/Pagination'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'
    post:
      summary: Create a research paper
      tags: [Research]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResearchCreate'
      responses:
        '201':
          description: Research created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Research'
                      message:
                        type: string
                        example: Research created successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalError'
  /research/{researchId}:
    parameters:
      - name: researchId
        in: path
        required: true
        schema:
          type: integer
          minimum: 1
        description: Research identifier
    get:
      summary: Get a research paper by ID
      tags: [Research]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Research retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Research'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
    put:
      summary: Update a research paper
      tags: [Research]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResearchCreate'
      responses:
        '200':
          description: Research updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Research'
                      message:
                        type: string
                        example: Research updated successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
    delete:
      summary: Delete a research paper
      tags: [Research]
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Research deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
  /galleries:
    get:
      summary: Get all galleries
      tags: [Galleries]
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/OrderParam'
      responses:
        '200':
          description: Paginated list of galleries
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          galleries:
                            type: array
                            items:
                              $ref: '#/components/schemas/Gallery'
                          pagination:
                            $ref: '#/components/schemas/Pagination'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'
    post:
      summary: Create a gallery
      tags: [Galleries]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GalleryCreate'
      responses:
        '201':
          description: Gallery created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Gallery'
                      message:
                        type: string
                        example: Gallery created successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalError'
  /galleries/{galleryId}:
    parameters:
      - name: galleryId
        in: path
        required: true
        schema:
          type: integer
          minimum: 1
        description: Gallery identifier
    get:
      summary: Get a gallery by ID
      tags: [Galleries]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Gallery retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Gallery'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
    put:
      summary: Update a gallery
      tags: [Galleries]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GalleryCreate'
      responses:
        '200':
          description: Gallery updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Gallery'
                      message:
                        type: string
                        example: Gallery updated successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
    delete:
      summary: Delete a gallery
      tags: [Galleries]
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Gallery deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
  /attachments:
    get:
      summary: Get all attachments
      tags: [Attachments]
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/OrderParam'
      responses:
        '200':
          description: Paginated list of attachments
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          attachments:
                            type: array
                            items:
                              $ref: '#/components/schemas/Attachment'
                          pagination:
                            $ref: '#/components/schemas/Pagination'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'
    post:
      summary: Upload an attachment
      tags: [Attachments]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '201':
          description: Attachment uploaded successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Attachment'
                      message:
                        type: string
                        example: Attachment uploaded successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '413':
          description: Payload too large
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalError'
  /attachments/{attachmentId}:
    parameters:
      - name: attachmentId
        in: path
        required: true
        schema:
          type: integer
          minimum: 1
        description: Attachment identifier
    get:
      summary: Download an attachment
      tags: [Attachments]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Attachment binary data
          content:
            application/octet-stream: {}
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
    delete:
      summary: Delete an attachment
      tags: [Attachments]
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Attachment deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
  /images:
    get:
      summary: Get all images
      tags: [Images]
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
      responses:
        '200':
          description: Paginated list of images
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          images:
                            type: array
                            items:
                              $ref: '#/components/schemas/Image'
                          pagination:
                            $ref: '#/components/schemas/Pagination'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'
    post:
      summary: Upload an image
      tags: [Images]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                alt:
                  type: string
      responses:
        '201':
          description: Image uploaded successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Image'
                      message:
                        type: string
                        example: Image uploaded successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '413':
          description: Payload too large
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalError'
  /images/{imageId}:
    parameters:
      - name: imageId
        in: path
        required: true
        schema:
          type: integer
          minimum: 1
        description: Image identifier
    get:
      summary: Get image metadata
      tags: [Images]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Image metadata retrieved
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Image'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
    delete:
      summary: Delete an image
      tags: [Images]
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Image deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
  /youtube/playlists:
    get:
      summary: Get YouTube playlists
      tags: [YouTube]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of YouTube playlists
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Playlist'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'
  /youtube/playlists/{playlistId}:
    parameters:
      - name: playlistId
        in: path
        required: true
        schema:
          type: string
        description: YouTube playlist ID
    get:
      summary: Get a single YouTube playlist
      tags: [YouTube]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Playlist retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Playlist'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
  /youtube/playlists/{playlistId}/videos:
    parameters:
      - name: playlistId
        in: path
        required: true
        schema:
          type: string
        description: YouTube playlist ID
    get:
      summary: Get videos in a YouTube playlist
      tags: [YouTube]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of videos in the playlist
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Video'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
  /stores:
    get:
      summary: Get all store locations
      tags: [Stores]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of stores
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Store'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'
  /stores/{city}:
    parameters:
      - name: city
        in: path
        required: true
        schema:
          type: string
        description: City name
    get:
      summary: Get store details by city
      tags: [Stores]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Store details
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Store'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
  /stores/{city}/sellpoints:
    parameters:
      - name: city
        in: path
        required: true
        schema:
          type: string
        description: City name
    get:
      summary: Get sellpoints for a city
      tags: [Stores]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of sellpoints in the city
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/StandardResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Sellpoint'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
security:
  - bearerAuth: []
